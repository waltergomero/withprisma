datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Status {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  status_name       String    @unique
  status_type_id    Int
  isactive          Boolean
  created_by        String
  updated_by        String
}

model Category {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  category_name         String    @unique
  parent_category_id    String
  parent_category_name  String
  isactive              Boolean
  notes                 String
  created_by            String
  updated_by            String
}

model Gallery {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  category_id           String
  category_name         String    
  image_name            String
  src                   String
  format                String
  width                 Int
  height                Int
  caption               String
  make_visible          Boolean
  created_by            String
  updated_by            String
}

model Product {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  product_name          String
  slug                  String    
  category_id           String
  category_name         String
  quantity_per_unit     String
  cost                  Float
  price                 Float
  number_instock        Int
  number_onorder        Int
  reorder_level         Int
  description           String
  isactive              Boolean   
  created_by            String
  updated_by            String
}

model Homepagecategories {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  category_id           String    @unique
  category_name         String    @unique
  image_name            String
  src                   String
  width                 Int
  height                Int
  created_by            String
  updated_by            String
}

model Image {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    product_id          String
    image_name          String
    src                 String
    format              String
    width               Int
    height              Int
    order               Int
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  first_name    String?
  last_name     String?
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  isadmin       Boolean?
  isactive      Boolean?
  provider      String?
  type          String?
  created_by    String?
  updated_by    String?
  image         String?
  accounts      Account[]
  sessions      Session[] 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 